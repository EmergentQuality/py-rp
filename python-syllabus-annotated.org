
* UNIT 0 PRE-WORK

  - Gain an introduction to programming and beginning writing pseudocode.
  - Get acquainted with Python fundamentals.

* UNIT 1 PROGRAMMING AND PYTHON FUNDAMENTALS

  - Explore the concept of variables and differentiate between variable types.    
  - Create and re-assign numerical variables using common naming guidelines and numerical operations.
  - Reassign variables using variables and shorthand assignmewnt operators.
  - Create string variables, concatenate strings, and print complex structures.

* UNIT 2 CONTROL FLOW

  - Define control flow and describe scenarios in which control flow would be helpful.
  - Explore logical comparison. Explain different comparison and equality operators and use them to evaluate and compare statements.
  - Get acquainted with Booleans, use if/elif/else conditionals to control program flow based on Boolean conditions, and use comparison operators in conditionals.
  - Create and manipulate lists, adding and removing elements and printing out elements/list lengths.
  - Understand the use of for loops in programming.  Use for loops to iterate lists and range() to dynamically generate loops.
  - Explain while lopps and their best use cases.  Use while loops to control program flow.
  - Dive into functions, identifying use case, creating and calling functions, and returning values.
  - Utilize parameters and arguments in functions.  Implement keyword arguments.

* UNIT 3 OBJECT-ORIENTED PROGRAMMING IN PYTHON FULL-STACK DEVELOPMENT

  - Define object-oriented programming and provide examples of what could be described as an object.
  - Differentiate between keys and values. Compare and contrast dictionaries and lists.  Use dictionaries to solve common problems in Python.
  - Distinguish between lists and sets.  Create variables that hold sets.  Use sets to determine the frequency of elements.
  - Compare and constrast classes and objects.  Define classes.  Instantiate objects from classes.
  - Explain the use of the __init__ method.  Understand class variables versus instance variables.
  - Implement inheritance.  Describe what has been inherited from one class to another and when to use inheritance. 

* UNIT 4 COMMON PYTHON TROUBLESHOOTING

  - Define variable scope and explain the order of scope precendence that Python follows when resolving variable names.  Use the global keybord to access global variables.
  - Understand common types of errors and use print statements to troubleshoot.  Implement the try-except code to handle errors.
  - Define when floats are created, use escape characters, and perform basic data type conversion.

* UNIT 5 INTERMEDIATE PYTHON

  - Review Python basics covered so far.
  - Get acquainted with key components of intermediate Python coding, such as scripting, abstraction, modules, and libraries and APIs.
  - Define the uses of scripting and write scripts that perform file I/O.
  - Explore code abstraction. Use itertools to implement efficient looping and list comprehensions to concisely create lists.
  - Add libraries and modules to Python programs.  Create programs utilizing PyTime.  Navigate library documentation.
  - Describe what an application programming interface (API) is and why we might use one.  Identify common APIs on the web.  Call APIs.

* UNIT 6 INTRODUCTION TO DATA SCIENCE

  - Review Python basics and intermediate skills covered so far.  
  - Explore how Python is used by data scientists through a case study.
  - Use Pandas to read in data sets.  Filtyer, sort, and manipulate DataFrames and Series.
  - Describe why data visualization is important.  Identify the characteristics of a great data visualization.  Identify when you would use bar charts, pie charts, scatterplots, and histograms.
  - Identify different types of graphs on a given data set using Pandas.
  - Identify and handle missing values with Pandas.  Implement groupby() statements for specific segmented analysis.  Use apply() functions to clean data with Python.

* SPECIAL TOPIC - INTRODUCTION TO WEB APPLICATIONS

  - Review Python basics and intermediate skills covered so far.
  - Explore how Python is used by web developers with a case study.
  - Differentiate between web applications, websites, front-end, and back-end.  Apply basic HTML and CSS.
  - Define Flask, understand how values are passed between websites and the Flask back end, and create simple Flask websites.
  - Create routines using Flask.  Pass variables into routes.
  - Implement simple templates in Flask apps.  Pass variables into templates.

* PYTHON PROJECT

  - Review what's been covered throughout the course.
  - Choose a project based on your interests and use Python skills to build an application.
  - Identify ways to keep learning.


* OPEN QUESTIONS

[ ] What topics won't be covered
[ ] Yield vs. return
[ ] Async, await, asyncio, etc.
[ ] Generators
[ ] Decorators
[ ] Lambdas

* GENERAL RESOUCES


  ** VIDEO

  - My Python playlist: [[https://www.youtube.com/playlist?list=PLJ3MbxvfCs3UF9aoYDvuTXKF3OOVtWPqD]]  
  - Python Programming playlist: [[]]

  ** BOOKS

  - Python Notes for Professionals [[https://www.dropbox.com/search/personal?path=%2F&preview=PythonNotesForProfessionals.pdf&query=Python&search_session_id=82886349670747725980913121409009&search_token=zm9vlkvgcuOSpBfMEWzgT%2Fx%2FxOcY4a%2BcuDuU5Ndme7Y%3D]]
  - Python the Complete Manual [[https://www.dropbox.com/home/workspace/logos/New%2010/Python%20Books?preview=329003078-Python-The-Complete-Manual-2nd-Edition-pdf.pdf]]
  - Functional Programming in Python [[https://www.dropbox.com/home/workspace/logos/New%2010/Python%20Books?preview=Functional+Programming+in+Python.pdf]]  
  - Mastering Python [[https://www.dropbox.com/home/workspace/logos/New%2010/Python%20Books?preview=Mastering+Python.pdf]]   
  - Designing Machine Learning Systems with Python [[https://www.dropbox.com/home/workspace/logos/New%2010/Python%20Books?preview=Designing+Machine+Learning+Systems+with+Python.pdf]]  
  

  ** MISC

  - Python 3 Cheat Sheet [[https://www.dropbox.com/home/workspace/logos/New%2010/Python%20Books?preview=Python+3+Cheat+Sheet.pdf]]  


https://github.com/EmergentQuality/py-rp


* OOP RESOURCES

  [[https://www.amazon.com/Object-Oriented-Thought-Process-Developers-Library/dp/0321861272/ref=sr_1_1?ie=UTF8&qid=1539222789&sr=8-1&keywords=the+object-oriented+thought+process]] <== First book I read.
  [[https://en.wikipedia.org/wiki/Categories_(Aristotle)]]
  [[https://en.wikipedia.org/wiki/Category_(Kant)]]
  [[https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53]]
  [[https://biblia.com/bible/esv/Gen%201]]
  [[file:///Volumes/drugdev/Private/jeffrey.liss/Research/44744-153465-1-PB.pdf]] <=== !!!!
  [[https://www.simulation-argument.com/simulation.pdf]]
  [[https://en.wikipedia.org/wiki/Simulacra_and_Simulation]]


